makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve<- function(x, ...) {
inv <- x$getInverse()
test=ncol(x$get())-nrow(x$get())
#exit tests
if(test!=0) {
return("must be a square matrix")
}
else {
c3 <- det(x$get())
if(c3==0) {
return("not invertible")
}}
if (!is.null(inv)) {
message("getting cached data")
return(inv)}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
a = replicate(5,rnorm(5))
a
b=makeCacheMatrix(a)
b$get()
b$getInverse()
cacheSolve(b)
cacheSolve(b)
a = matrix(1:16,4,4)
a
b=makeCacheMatrix(a)
b$get()
b$getInverse()
cacheSolve(b)
a<-matrix(c(3,5,6,7,8,9), ncol=3, nrow=2)
a
b=makeCacheMatrix(a)
b$get()
b$getInverse()
cacheSolve(b)
cacheSolve(b)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
cacheSolve<- function(x, ...) {
inv <- x$getInverse()
test=ncol(x$get())-nrow(x$get())
#exit tests
if(test!=0) {
return("must be a square matrix")
}
else {
c3 <- det(x$get())
if(c3==0) {
return("not invertible")
}}
if (!is.null(inv)) {
message("getting cached data")
return(inv)}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
a = replicate(5,rnorm(5))
a
b=makeCacheMatrix(a)
b$get()
b$getInverse()
cacheSolve(b)
cacheSolve(b)
#testing a non invertible matrix
a = matrix(1:16,4,4)
a
b=makeCacheMatrix(a)
b$get()
b$getInverse()
cacheSolve(b)
cacheSolve(b)
#testing a non square matrix
a<-matrix(c(3,5,6,7,8,9), ncol=3, nrow=2)
a
b=makeCacheMatrix(a)
b$get()
b$getInverse()
cacheSolve(b)
cacheSolve(b)
